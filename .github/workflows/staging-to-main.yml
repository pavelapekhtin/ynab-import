name: Staging to Main

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate-for-release:
    runs-on: ubuntu-latest
    if: github.head_ref == 'staging'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Run comprehensive tests
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run pytest --cov=ynab_import --cov-report=xml --cov-fail-under=80

    - name: Build and validate package
      run: |
        uv build
        uv run twine check dist/*

    - name: Check version consistency
      run: |
        # Extract version from pyproject.toml
        PROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "//' | sed 's/"//')

        # Extract version from __init__.py
        INIT_VERSION=$(grep '__version__ = ' src/ynab_import/__init__.py | sed 's/__version__ = "//' | sed 's/"//')

        echo "Project version: $PROJECT_VERSION"
        echo "Init version: $INIT_VERSION"

        if [ "$PROJECT_VERSION" != "$INIT_VERSION" ]; then
          echo "‚ùå Version mismatch between pyproject.toml and __init__.py"
          exit 1
        fi

        echo "‚úÖ Version consistency check passed"

    - name: Check for unreleased changes
      run: |
        # Check if CHANGELOG.md has unreleased changes
        if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
          echo "‚ùå No unreleased changes found in CHANGELOG.md"
          echo "Please add changes to the Unreleased section before merging to main"
          exit 1
        fi

        echo "‚úÖ Unreleased changes found in CHANGELOG.md"

    - name: Comment PR with release readiness
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üöÄ Release Readiness Check

            ‚úÖ All tests passed
            ‚úÖ Package builds successfully
            ‚úÖ Version consistency verified
            ‚úÖ Unreleased changes documented

            **Ready for merge to main!**

            After merging, create a release tag to trigger PyPI publishing:
            \`\`\`bash
            git tag v$(grep '^version = ' pyproject.toml | sed 's/version = "//' | sed 's/"//')
            git push origin v$(grep '^version = ' pyproject.toml | sed 's/version = "//' | sed 's/"//')
            \`\`\``
          })
